{"version":3,"sources":["components/SongList.js","actions/index.js","components/SongDetail.js","components/App.js","reducers/index.js","index.js"],"names":["SongsList","this","props","songs","map","song","className","key","title","onClick","selectedSong","console","log","renderList","Component","connect","state","type","payload","mySong","duration","App","combineReducers","action","ReactDOM","render","store","createStore","reducers","document","getElementById"],"mappings":"uOAgBMA,E,2KAEY,IAAD,OACT,OAAOC,KAAKC,MAAMC,MAAMC,KACpB,SAAAC,GAAI,OAAI,yBAAKC,UAAU,OAAOC,IAAKF,EAAKG,OAEpC,yBAAKF,UAAU,yBACX,4BAEIG,QAAS,kBAAM,EAAKP,MAAMQ,aAAaL,IACvCC,UAAU,qBAHd,WAQJ,yBAAKA,UAAU,WAAWD,EAAKG,a,+BASvC,OAFAG,QAAQC,IAAI,kCAAmCX,KAAKC,OAGhD,yBAAKI,UAAU,mBACVL,KAAKY,kB,GA1BEC,aAuCTC,eANS,SAACC,GAGrB,OAFAL,QAAQC,IAAI,2BAA4BI,GAEjC,CAACb,MAAOa,EAAMb,SAGe,CAACO,aCrDb,SAACL,GACzB,MAAO,CACHY,KAAM,gBACNC,QAASb,KDkDFU,CAAyCf,GE/BzCe,eAJS,SAACC,GACrB,MAAO,CAACG,OAAQH,EAAMN,gBAGXK,EAnBI,SAAC,GAAD,IAAEI,EAAF,EAAEA,OAAF,OAAgBA,EAC3B,6BAAK,4CAAqB,qCAAWA,EAAOX,OAA5C,IAAuD,yCAAeW,EAAOC,WADzC,kDCe7BC,EAhBH,WACR,OACI,yBAAKf,UAAU,qBACX,yBAAKA,UAAU,UACX,yBAAKA,UAAU,qBACX,kBAAC,EAAD,OAEJ,yBAAKA,UAAU,qBACX,kBAAC,EAAD,UCmBLgB,cAAgB,CAC3BnB,MA5BkB,WAClB,MAAO,CACH,CACIK,MAAO,QACPY,SAAU,QACX,CACCZ,MAAO,QACPY,SAAU,QACX,CACCZ,MAAO,QACPY,SAAU,QACX,CACCZ,MAAO,QACPY,SAAU,UAgBlBV,aAVwB,WAAkC,IAAjCA,EAAgC,uDAAjB,KAAMa,EAAW,uCACzD,MAAoB,kBAAhBA,EAAON,KACAM,EAAOL,QAGXR,KCpBXc,IAASC,OACL,kBAAC,IAAD,CAAUC,MAAOC,YAAYC,IACzB,kBAAC,EAAD,OAGJC,SAASC,eAAe,W","file":"static/js/main.5c2a4a6a.chunk.js","sourcesContent":["/*\n 1) call connect() function get a list of songs from Store through Provider\n 2) pass SongList component as a second function call\n 3) define mapStateToProps() function that pass props object from state to SongList\n 4) function connect:\n    1) returns the connect() function with argument mapStateToProps &\n    2) invokes the SongsList function\n 5) pass state to SongsList as a props\n 6) import {selectedSong} & pass actionCreator to connect() to activate dispatch function\n    & call in SongList component onClick={() => this.props.selectedSong(song)}\n*/\n\nimport React, {Component} from \"react\";\nimport {connect} from 'react-redux';\nimport {selectedSong} from \"../actions\";\n\nclass SongsList extends Component {\n\n    renderList() {\n        return this.props.songs.map(\n            song => <div className=\"item\" key={song.title}>\n\n                <div className=\"right floated content\">\n                    <button\n                        // onClick={() => console.log('clicked', this.props.selectedSong(song))}\n                        onClick={() => this.props.selectedSong(song)}\n                        className=\"ui button primary\">\n                        Select\n                    </button>\n                </div>\n\n                <div className=\"content\">{song.title}</div>\n            </div>\n        )\n    }\n\n    render() {\n        // this.props === {songs: state.songs}\n        console.log('SongsList render() this.props: ', this.props);\n\n        return (\n            <div className=\"ui divided list\">\n                {this.renderList()}\n            </div>\n        );\n    }\n\n}\n\nconst mapStateToProps = (state) => {\n    console.log('mapStateToProps(state): ', state);\n\n    return {songs: state.songs}\n};\n\nexport default connect(mapStateToProps, {selectedSong})(SongsList)","// Action creator returns an action - Selected Song\n\nexport const selectedSong = (song) => {\n    return {\n        type: 'SONG_SELECTED',\n        payload: song\n    }\n};\n","// Shorthand: https://www.sitepoint.com/shorthand-javascript-techniques/\n// Deep house https://youtu.be/Arfzh91K2TQ?t=4770\nimport React from \"react\";\nimport {connect} from 'react-redux';\n\nconst SongDetail = ({mySong}) => (!mySong ? <h3>Select the song</h3> :\n        <div><h3>Details for:</h3><p>Title: {mySong.title}</p> <p> Duration: {mySong.duration}</p></div>\n    // !mySong || <div>{mySong.title}</div>\n\n    // if(!mySong){\n    //     return <div>Select the song</div>\n    // }\n    // return (\n    //     <div>\n    //         {mySong.title}\n    //     </div>\n    // );\n);\n\n\nconst mapStateToProps = (state) => {\n    return {mySong: state.selectedSong}\n};\n\nexport default connect(mapStateToProps)(SongDetail)","import React from \"react\";\nimport SongsList from \"./SongList\";\nimport SongDetail from \"./SongDetail\";\n\nconst App = () => {\n    return (\n        <div className=\"ui container grid\">\n            <div className=\"ui row\">\n                <div className=\"column eight wide\">\n                    <SongsList/>\n                </div>\n                <div className=\"column eight wide\">\n                    <SongDetail/>\n                </div>\n            </div>\n\n        </div>\n    )\n};\n\nexport default App","// Wire up 2 reducers using Redux library that will be the state (songs, selectedSong)\n\nimport {combineReducers} from \"redux\";\n\nconst songsReduucer = () => {\n    return [\n        {\n            title: 'song1',\n            duration: '4:20'\n        }, {\n            title: 'song2',\n            duration: '2:40'\n        }, {\n            title: 'song3',\n            duration: '5:10'\n        }, {\n            title: 'song4',\n            duration: '3:20'\n        }\n    ]\n};\n\n\nconst selectedSongReducer = (selectedSong = null, action) => {\n    if (action.type === 'SONG_SELECTED') {\n        return action.payload\n    }\n\n    return selectedSong\n};\n\nexport default combineReducers({\n    songs: songsReduucer,\n    selectedSong: selectedSongReducer\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport {createStore} from \"redux\";\n\nimport App from './components/App';\nimport reducers from './reducers';\n\nReactDOM.render(\n    <Provider store={createStore(reducers)}>\n        <App/>\n    </Provider>\n    ,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}